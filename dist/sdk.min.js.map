{"version":3,"file":"sdk.min.js","sources":["../src/sdk.js"],"sourcesContent":["class ApexxCloud {\n  constructor(config = {}) {\n    this.config = {\n      baseUrl: config.baseUrl || \"https://api.apexxcloud.com\",\n    };\n\n    // Initialize API clients\n    this.files = {\n      upload: this.uploadFile.bind(this),\n      uploadMultipart: this.uploadMultipart.bind(this),\n    };\n  }\n\n  async uploadMultipart(\n    file,\n    getSignedUrl,\n    {\n      onProgress = () => {},\n      onPartComplete = () => {},\n      onComplete = () => {},\n      onError = () => {},\n      partSize = 5 * 1024 * 1024,\n      signal,\n      concurrency = 3,\n    } = {}\n  ) {\n    let uploadId;\n    try {\n      // Start multipart upload\n      const startUrl = await getSignedUrl(\"start-multipart\", {\n        key: file.name,\n        totalParts: Math.ceil(file.size / partSize),\n        mimeType: file.type,\n      });\n\n      const startUpload = () =>\n        new Promise((resolve, reject) => {\n          const xhr = new XMLHttpRequest();\n\n          if (signal?.aborted) {\n            onError({\n              type: \"abort\",\n              error: new Error(\"Upload aborted\"),\n              phase: \"start\",\n              timestamp: new Date(),\n            });\n            reject(new Error(\"Upload aborted\"));\n            return;\n          }\n\n          xhr.open(\"POST\", startUrl);\n          xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n          xhr.onload = () => {\n            if (xhr.status >= 200 && xhr.status < 300) {\n              resolve(JSON.parse(xhr.responseText));\n            } else {\n              const error = new Error(\n                `Start upload failed with status ${xhr.status}`\n              );\n              onError({\n                type: \"error\",\n                error,\n                phase: \"start\",\n                status: xhr.status,\n                timestamp: new Date(),\n              });\n              reject(error);\n            }\n          };\n\n          xhr.onerror = () => {\n            const error = new Error(\"Start upload failed\");\n            onError({\n              type: \"error\",\n              error,\n              phase: \"start\",\n              timestamp: new Date(),\n            });\n            reject(error);\n          };\n\n          xhr.send(\n            JSON.stringify({\n              filename: file.name,\n              contentType: file.type,\n              size: file.size,\n            })\n          );\n        });\n\n      const { uploadId } = await startUpload();\n\n      // Calculate parts\n      const totalParts = Math.ceil(file.size / partSize);\n      const parts = [];\n      let uploadedBytes = 0;\n\n      // Upload parts with concurrency control\n      const uploadPart = async (partNumber) => {\n        const start = (partNumber - 1) * partSize;\n        const end = Math.min(start + partSize, file.size);\n        const chunk = file.slice(start, end);\n\n        const partUrl = await getSignedUrl(\"uploadpart\", {\n          uploadId,\n          partNumber,\n          key: file.name,\n          totalParts,\n        });\n\n        return new Promise((resolve, reject) => {\n          const xhr = new XMLHttpRequest();\n\n          if (signal?.aborted) {\n            reject(new Error(\"Upload aborted\"));\n            return;\n          }\n\n          xhr.upload.onprogress = (event) => {\n            if (event.lengthComputable) {\n              const partProgress = event.loaded / event.total;\n              const partSize = end - start;\n              const partLoaded = partSize * partProgress;\n\n              const totalProgress =\n                ((uploadedBytes + partLoaded) / file.size) * 100;\n\n              onProgress({\n                loaded: uploadedBytes + partLoaded,\n                total: file.size,\n                progress: totalProgress,\n                part: {\n                  number: partNumber,\n                  progress: partProgress * 100,\n                },\n              });\n            }\n          };\n\n          xhr.open(\"POST\", partUrl);\n\n          xhr.onload = () => {\n            if (xhr.status >= 200 && xhr.status < 300) {\n              const etag = xhr.getResponseHeader(\"ETag\");\n              uploadedBytes += chunk.size;\n\n              const part = {\n                ETag: etag,\n                PartNumber: partNumber,\n              };\n\n              onPartComplete(part);\n              resolve(part);\n            } else {\n              reject(new Error(`Part upload failed with status ${xhr.status}`));\n            }\n          };\n\n          xhr.onerror = () => reject(new Error(\"Part upload failed\"));\n          xhr.send(chunk);\n        });\n      };\n\n      // Upload parts with concurrency control\n      for (let i = 0; i < totalParts; i += concurrency) {\n        const partNumbers = Array.from(\n          { length: Math.min(concurrency, totalParts - i) },\n          (_, index) => i + index + 1\n        );\n\n        const uploadedParts = await Promise.all(\n          partNumbers.map((partNumber) => uploadPart(partNumber))\n        );\n        parts.push(...uploadedParts);\n      }\n\n      // Complete upload\n      const completeUrl = await getSignedUrl(\"completemultipart\", {\n        uploadId,\n        key: file.name,\n      });\n\n      const completeUpload = () =>\n        new Promise((resolve, reject) => {\n          const xhr = new XMLHttpRequest();\n\n          xhr.open(\"POST\", completeUrl);\n          xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n          xhr.onload = () => {\n            if (xhr.status >= 200 && xhr.status < 300) {\n              const response = JSON.parse(xhr.responseText);\n              onComplete({\n                type: \"complete\",\n                response,\n                timestamp: new Date(),\n                file: {\n                  name: file.name,\n                  size: file.size,\n                  type: file.type,\n                },\n              });\n              resolve(response);\n            } else {\n              reject(\n                new Error(`Complete upload failed with status ${xhr.status}`)\n              );\n            }\n          };\n\n          xhr.onerror = () => reject(new Error(\"Complete upload failed\"));\n          xhr.send(\n            JSON.stringify({\n              parts: parts.sort((a, b) => a.PartNumber - b.PartNumber),\n            })\n          );\n        });\n\n      return await completeUpload();\n    } catch (error) {\n      // If something goes wrong and we have an uploadId, try to cancel the upload\n      if (uploadId) {\n        try {\n          const cancelUrl = await getSignedUrl(\"cancelmultipart\", {\n            uploadId,\n            key: file.name,\n          });\n\n          await new Promise((resolve, reject) => {\n            const xhr = new XMLHttpRequest();\n            xhr.open(\"DELETE\", cancelUrl);\n            xhr.onload = () => (xhr.status < 300 ? resolve() : reject());\n            xhr.onerror = () => reject();\n            xhr.send();\n          });\n        } catch (cancelError) {\n          console.error(\"Failed to cancel multipart upload:\", cancelError);\n        }\n      }\n\n      onError({\n        type: \"error\",\n        error,\n        phase: \"upload\",\n        timestamp: new Date(),\n      });\n      throw error;\n    }\n  }\n\n  async uploadFile(\n    file,\n    getSignedUrl,\n    {\n      onProgress = () => {},\n      onComplete = () => {},\n      onError = () => {},\n      onStart = () => {},\n      signal,\n    } = {}\n  ) {\n    try {\n      // Get signed URL for upload\n      const signedUrl = await getSignedUrl(\"upload\", {\n        key: file.name,\n        mimeType: file.type,\n      });\n\n      const xhr = new XMLHttpRequest();\n\n      // Setup abort signal handler\n      if (signal?.aborted) {\n        onError({\n          type: \"abort\",\n          error: new Error(\"Upload aborted\"),\n          timestamp: new Date(),\n        });\n        throw new Error(\"Upload aborted\");\n      }\n\n      signal?.addEventListener(\"abort\", () => xhr.abort());\n\n      // Return promise for upload completion\n      return new Promise((resolve, reject) => {\n        xhr.open(\"PUT\", signedUrl);\n\n        // Setup progress tracking\n        xhr.upload.onprogress = (event) => {\n          if (event.lengthComputable) {\n            const percentComplete = (event.loaded / event.total) * 100;\n            onProgress({\n              loaded: event.loaded,\n              total: event.total,\n              progress: percentComplete,\n              type: \"progress\",\n            });\n          }\n        };\n\n        // Setup start handler\n        xhr.upload.onloadstart = () => {\n          onStart({\n            type: \"start\",\n            timestamp: new Date(),\n            file: {\n              name: file.name,\n              size: file.size,\n              type: file.type,\n            },\n          });\n        };\n\n        // Setup completion handler\n        xhr.onload = () => {\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              const response = JSON.parse(xhr.responseText);\n              onComplete({\n                type: \"complete\",\n                response,\n                timestamp: new Date(),\n                file: {\n                  name: file.name,\n                  size: file.size,\n                  type: file.type,\n                },\n              });\n              resolve(response);\n            } catch (e) {\n              onComplete({\n                type: \"complete\",\n                response: xhr.responseText,\n                timestamp: new Date(),\n                file: {\n                  name: file.name,\n                  size: file.size,\n                  type: file.type,\n                },\n              });\n              resolve(xhr.responseText);\n            }\n          } else {\n            const error = new Error(`Upload failed with status ${xhr.status}`);\n            onError({\n              type: \"error\",\n              error,\n              status: xhr.status,\n              timestamp: new Date(),\n            });\n            reject(error);\n          }\n        };\n\n        xhr.onerror = () => {\n          const error = new Error(\"Upload failed\");\n          onError({\n            type: \"error\",\n            error,\n            timestamp: new Date(),\n          });\n          reject(error);\n        };\n\n        xhr.onabort = () => {\n          const error = new Error(\"Upload aborted\");\n          onError({\n            type: \"abort\",\n            error,\n            timestamp: new Date(),\n          });\n          reject(error);\n        };\n\n        // Create FormData and send\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        xhr.send(formData);\n      });\n    } catch (error) {\n      onError({\n        type: \"error\",\n        error,\n        timestamp: new Date(),\n      });\n      throw error;\n    }\n  }\n}\n\nexport default ApexxCloud;\n"],"names":["constructor","config","this","baseUrl","files","upload","uploadFile","bind","uploadMultipart","file","getSignedUrl","onProgress","onPartComplete","onComplete","onError","partSize","signal","concurrency","startUrl","key","name","totalParts","Math","ceil","size","mimeType","type","startUpload","Promise","resolve","reject","xhr","XMLHttpRequest","aborted","error","Error","phase","timestamp","Date","open","setRequestHeader","onload","status","JSON","parse","responseText","onerror","send","stringify","filename","contentType","uploadId","parts","uploadedBytes","uploadPart","async","start","partNumber","end","min","chunk","slice","partUrl","onprogress","event","lengthComputable","partProgress","loaded","total","partLoaded","totalProgress","progress","part","number","etag","getResponseHeader","ETag","PartNumber","i","partNumbers","Array","from","length","_","index","uploadedParts","all","map","push","completeUrl","completeUpload","response","sort","a","b","onStart","signedUrl","addEventListener","abort","percentComplete","onloadstart","e","onabort","formData","FormData","append"],"mappings":"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"}