{"version":3,"file":"sdk.min.js","sources":["../src/sdk.js"],"sourcesContent":["class ApexxCloud {\n  constructor(config = {}) {\n    this.config = {\n      baseUrl: config.baseUrl || \"https://api.apexxcloud.com\",\n    };\n\n    // Initialize API clients\n    this.files = {\n      upload: this.uploadFile.bind(this),\n    };\n  }\n\n  async uploadFile(\n    signedUrl,\n    file,\n    {\n      onProgress = () => {},\n      onComplete = () => {},\n      onError = () => {},\n      onStart = () => {},\n      signal,\n    } = {}\n  ) {\n    try {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n\n      const xhr = new XMLHttpRequest();\n\n      // Setup abort signal handler\n      if (signal) {\n        signal.addEventListener(\"abort\", () => {\n          xhr.abort();\n        });\n\n        // If signal is already aborted, throw error immediately\n        if (signal.aborted) {\n          onError({\n            type: \"error\",\n            error: new Error(\"Upload aborted\"),\n            originalEvent: event,\n            timestamp: new Date(),\n          });\n          throw new Error(\"Upload aborted\");\n        }\n      }\n\n      // Setup progress tracking\n      xhr.upload.onprogress = (event) => {\n        if (event.lengthComputable) {\n          const percentComplete = (event.loaded / event.total) * 100;\n          onProgress({\n            loaded: event.loaded,\n            total: event.total,\n            progress: percentComplete,\n            type: \"progress\",\n          });\n        }\n      };\n\n      // Return promise for upload completion\n      return new Promise((resolve, reject) => {\n        xhr.open(\"POST\", signedUrl, true);\n\n        // Setup start handler\n        xhr.upload.onloadstart = (event) => {\n          onStart({\n            type: \"start\",\n            timestamp: new Date(),\n            file: {\n              name: file.name,\n              size: file.size,\n              type: file.type,\n            },\n          });\n        };\n\n        // Setup completion handler\n        xhr.onload = () => {\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              const response = JSON.parse(xhr.responseText);\n              onComplete({\n                type: \"complete\",\n                response,\n                timestamp: new Date(),\n              });\n              resolve(response);\n            } catch (e) {\n              onComplete({\n                type: \"complete\",\n                response: xhr.responseText,\n                timestamp: new Date(),\n              });\n              resolve(xhr.responseText);\n            }\n          } else {\n            const error = new Error(`Upload failed with status ${xhr.status}`);\n            onError({\n              type: \"error\",\n              error,\n              status: xhr.status,\n              timestamp: new Date(),\n            });\n            reject(error);\n          }\n        };\n\n        // Setup error handler\n        xhr.onerror = (event) => {\n          const error = new Error(\"Upload failed\");\n          onError({\n            type: \"error\",\n            error,\n            originalEvent: event,\n            timestamp: new Date(),\n          });\n          reject(error);\n        };\n\n        // Setup abort handler\n        xhr.onabort = (event) => {\n          const error = new Error(\"Upload aborted\");\n          onError({\n            type: \"abort\",\n            error,\n            originalEvent: event,\n            timestamp: new Date(),\n          });\n          reject(error);\n        };\n\n        xhr.send(formData);\n      });\n    } catch (error) {\n      onError({\n        type: \"error\",\n        error,\n        timestamp: new Date(),\n      });\n      throw new Error(`Upload failed: ${error.message}`);\n    }\n  }\n}\n\nexport default ApexxCloud;\n"],"names":["constructor","config","this","baseUrl","files","upload","uploadFile","bind","signedUrl","file","onProgress","onComplete","onError","onStart","signal","formData","FormData","append","xhr","XMLHttpRequest","addEventListener","abort","aborted","type","error","Error","originalEvent","event","timestamp","Date","onprogress","lengthComputable","percentComplete","loaded","total","progress","Promise","resolve","reject","open","onloadstart","name","size","onload","status","response","JSON","parse","responseText","e","onerror","onabort","send","message"],"mappings":"qPAAA,MACEA,WAAAA,CAAYC,EAAS,IACnBC,KAAKD,OAAS,CACZE,QAASF,EAAOE,SAAW,8BAI7BD,KAAKE,MAAQ,CACXC,OAAQH,KAAKI,WAAWC,KAAKL,MAEjC,CAEA,gBAAMI,CACJE,EACAC,GACAC,WACEA,EAAaA,OAAQC,WACrBA,EAAaA,OAAQC,QACrBA,EAAUA,OAAQC,QAClBA,EAAUA,OAAQC,OAClBA,GACE,IAEJ,IACE,MAAMC,EAAW,IAAIC,SACrBD,EAASE,OAAO,OAAQR,GAExB,MAAMS,EAAM,IAAIC,eAGhB,GAAIL,IACFA,EAAOM,iBAAiB,SAAS,KAC/BF,EAAIG,OAAO,IAITP,EAAOQ,SAOT,MANAV,EAAQ,CACNW,KAAM,QACNC,MAAO,IAAIC,MAAM,kBACjBC,cAAeC,MACfC,UAAW,IAAIC,OAEX,IAAIJ,MAAM,kBAkBpB,OAbAP,EAAIb,OAAOyB,WAAcH,IACvB,GAAIA,EAAMI,iBAAkB,CAC1B,MAAMC,EAAmBL,EAAMM,OAASN,EAAMO,MAAS,IACvDxB,EAAW,CACTuB,OAAQN,EAAMM,OACdC,MAAOP,EAAMO,MACbC,SAAUH,EACVT,KAAM,YAEV,GAIK,IAAIa,SAAQ,CAACC,EAASC,KAC3BpB,EAAIqB,KAAK,OAAQ/B,GAAW,GAG5BU,EAAIb,OAAOmC,YAAeb,IACxBd,EAAQ,CACNU,KAAM,QACNK,UAAW,IAAIC,KACfpB,KAAM,CACJgC,KAAMhC,EAAKgC,KACXC,KAAMjC,EAAKiC,KACXnB,KAAMd,EAAKc,OAEb,EAIJL,EAAIyB,OAAS,KACX,GAAIzB,EAAI0B,QAAU,KAAO1B,EAAI0B,OAAS,IACpC,IACE,MAAMC,EAAWC,KAAKC,MAAM7B,EAAI8B,cAChCrC,EAAW,CACTY,KAAM,WACNsB,WACAjB,UAAW,IAAIC,OAEjBQ,EAAQQ,EACT,CAAC,MAAOI,GACPtC,EAAW,CACTY,KAAM,WACNsB,SAAU3B,EAAI8B,aACdpB,UAAW,IAAIC,OAEjBQ,EAAQnB,EAAI8B,aACd,KACK,CACL,MAAMxB,EAAQ,IAAIC,MAAM,6BAA6BP,EAAI0B,UACzDhC,EAAQ,CACNW,KAAM,QACNC,QACAoB,OAAQ1B,EAAI0B,OACZhB,UAAW,IAAIC,OAEjBS,EAAOd,EACT,GAIFN,EAAIgC,QAAWvB,IACb,MAAMH,EAAQ,IAAIC,MAAM,iBACxBb,EAAQ,CACNW,KAAM,QACNC,QACAE,cAAeC,EACfC,UAAW,IAAIC,OAEjBS,EAAOd,EAAM,EAIfN,EAAIiC,QAAWxB,IACb,MAAMH,EAAQ,IAAIC,MAAM,kBACxBb,EAAQ,CACNW,KAAM,QACNC,QACAE,cAAeC,EACfC,UAAW,IAAIC,OAEjBS,EAAOd,EAAM,EAGfN,EAAIkC,KAAKrC,EAAS,GAErB,CAAC,MAAOS,GAMP,MALAZ,EAAQ,CACNW,KAAM,QACNC,QACAI,UAAW,IAAIC,OAEX,IAAIJ,MAAM,kBAAkBD,EAAM6B,UAC1C,CACF"}