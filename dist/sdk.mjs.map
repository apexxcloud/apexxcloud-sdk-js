{"version":3,"file":"sdk.mjs","sources":["../src/sdk.js"],"sourcesContent":["class ApexxCloud {\n  constructor(config = {}) {\n    this.config = {\n      baseUrl: config.baseUrl || \"https://api.apexxcloud.com\",\n    };\n\n    // Initialize API clients\n    this.files = {\n      upload: this.uploadFile.bind(this),\n    };\n  }\n\n  async uploadFile(\n    signedUrl,\n    file,\n    {\n      onProgress = () => {},\n      onComplete = () => {},\n      onError = () => {},\n      onStart = () => {},\n      signal,\n    } = {}\n  ) {\n    try {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n\n      const xhr = new XMLHttpRequest();\n\n      // Setup abort signal handler\n      if (signal) {\n        signal.addEventListener(\"abort\", () => {\n          xhr.abort();\n        });\n\n        // If signal is already aborted, throw error immediately\n        if (signal.aborted) {\n          onError({\n            type: \"error\",\n            error: new Error(\"Upload aborted\"),\n            originalEvent: event,\n            timestamp: new Date(),\n          });\n          throw new Error(\"Upload aborted\");\n        }\n      }\n\n      // Setup progress tracking\n      xhr.upload.onprogress = (event) => {\n        if (event.lengthComputable) {\n          const percentComplete = (event.loaded / event.total) * 100;\n          onProgress({\n            loaded: event.loaded,\n            total: event.total,\n            progress: percentComplete,\n            type: \"progress\",\n          });\n        }\n      };\n\n      // Return promise for upload completion\n      return new Promise((resolve, reject) => {\n        xhr.open(\"POST\", signedUrl, true);\n\n        // Setup start handler\n        xhr.upload.onloadstart = (event) => {\n          onStart({\n            type: \"start\",\n            timestamp: new Date(),\n            file: {\n              name: file.name,\n              size: file.size,\n              type: file.type,\n            },\n          });\n        };\n\n        // Setup completion handler\n        xhr.onload = () => {\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              const response = JSON.parse(xhr.responseText);\n              onComplete({\n                type: \"complete\",\n                response,\n                timestamp: new Date(),\n              });\n              resolve(response);\n            } catch (e) {\n              onComplete({\n                type: \"complete\",\n                response: xhr.responseText,\n                timestamp: new Date(),\n              });\n              resolve(xhr.responseText);\n            }\n          } else {\n            const error = new Error(`Upload failed with status ${xhr.status}`);\n            onError({\n              type: \"error\",\n              error,\n              status: xhr.status,\n              timestamp: new Date(),\n            });\n            reject(error);\n          }\n        };\n\n        // Setup error handler\n        xhr.onerror = (event) => {\n          const error = new Error(\"Upload failed\");\n          onError({\n            type: \"error\",\n            error,\n            originalEvent: event,\n            timestamp: new Date(),\n          });\n          reject(error);\n        };\n\n        // Setup abort handler\n        xhr.onabort = (event) => {\n          const error = new Error(\"Upload aborted\");\n          onError({\n            type: \"abort\",\n            error,\n            originalEvent: event,\n            timestamp: new Date(),\n          });\n          reject(error);\n        };\n\n        xhr.send(formData);\n      });\n    } catch (error) {\n      onError({\n        type: \"error\",\n        error,\n        timestamp: new Date(),\n      });\n      throw new Error(`Upload failed: ${error.message}`);\n    }\n  }\n}\n\nexport default ApexxCloud;\n"],"names":["ApexxCloud","constructor","config","baseUrl","files","upload","uploadFile","bind","signedUrl","file","onProgress","onComplete","onError","onStart","signal","formData","FormData","append","xhr","XMLHttpRequest","addEventListener","abort","aborted","type","error","Error","originalEvent","event","timestamp","Date","onprogress","lengthComputable","percentComplete","loaded","total","progress","Promise","resolve","reject","open","onloadstart","name","size","onload","status","response","JSON","parse","responseText","e","onerror","onabort","send","message"],"mappings":"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"}