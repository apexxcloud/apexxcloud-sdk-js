{"version":3,"file":"sdk.mjs","sources":["../src/sdk.js"],"sourcesContent":["class ApexxCloud {\n  constructor(config = {}) {\n    this.config = {\n      baseUrl: config.baseUrl || \"https://api.apexxcloud.com\",\n    };\n\n    // Initialize API clients\n    this.files = {\n      upload: this.uploadFile.bind(this),\n      uploadMultipart: this.uploadMultipart.bind(this),\n    };\n  }\n\n  async uploadMultipart(\n    file,\n    getSignedUrl,\n    {\n      onProgress = () => {},\n      onPartComplete = () => {},\n      onComplete = () => {},\n      onError = () => {},\n      partSize = 5 * 1024 * 1024,\n      signal,\n      concurrency = 3,\n    } = {}\n  ) {\n    let uploadId;\n    try {\n      // Start multipart upload\n      const startUrl = await getSignedUrl(\"start-multipart\", {\n        key: file.name,\n        totalParts: Math.ceil(file.size / partSize),\n        mimeType: file.type,\n      });\n\n      const startUpload = () =>\n        new Promise((resolve, reject) => {\n          const xhr = new XMLHttpRequest();\n\n          if (signal?.aborted) {\n            onError({\n              type: \"abort\",\n              error: new Error(\"Upload aborted\"),\n              phase: \"start\",\n              timestamp: new Date(),\n            });\n            reject(new Error(\"Upload aborted\"));\n            return;\n          }\n\n          xhr.open(\"POST\", startUrl);\n          xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n          xhr.onload = () => {\n            if (xhr.status >= 200 && xhr.status < 300) {\n              resolve(JSON.parse(xhr.responseText));\n            } else {\n              const error = new Error(\n                `Start upload failed with status ${xhr.status}`\n              );\n              onError({\n                type: \"error\",\n                error,\n                phase: \"start\",\n                status: xhr.status,\n                timestamp: new Date(),\n              });\n              reject(error);\n            }\n          };\n\n          xhr.onerror = () => {\n            const error = new Error(\"Start upload failed\");\n            onError({\n              type: \"error\",\n              error,\n              phase: \"start\",\n              timestamp: new Date(),\n            });\n            reject(error);\n          };\n\n          xhr.send(\n            JSON.stringify({\n              filename: file.name,\n              contentType: file.type,\n              size: file.size,\n            })\n          );\n        });\n\n      const { uploadId } = await startUpload();\n\n      // Calculate parts\n      const totalParts = Math.ceil(file.size / partSize);\n      const parts = [];\n      let uploadedBytes = 0;\n\n      // Upload parts with concurrency control\n      const uploadPart = async (partNumber) => {\n        const start = (partNumber - 1) * partSize;\n        const end = Math.min(start + partSize, file.size);\n        const chunk = file.slice(start, end);\n\n        const partUrl = await getSignedUrl(\"uploadpart\", {\n          uploadId,\n          partNumber,\n          key: file.name,\n          totalParts,\n        });\n\n        return new Promise((resolve, reject) => {\n          const xhr = new XMLHttpRequest();\n\n          if (signal?.aborted) {\n            reject(new Error(\"Upload aborted\"));\n            return;\n          }\n\n          xhr.upload.onprogress = (event) => {\n            if (event.lengthComputable) {\n              const partProgress = event.loaded / event.total;\n              const partSize = end - start;\n              const partLoaded = partSize * partProgress;\n\n              const totalProgress =\n                ((uploadedBytes + partLoaded) / file.size) * 100;\n\n              onProgress({\n                loaded: uploadedBytes + partLoaded,\n                total: file.size,\n                progress: totalProgress,\n                part: {\n                  number: partNumber,\n                  progress: partProgress * 100,\n                },\n              });\n            }\n          };\n\n          xhr.open(\"PUT\", partUrl);\n\n          xhr.onload = () => {\n            if (xhr.status >= 200 && xhr.status < 300) {\n              const etag = xhr.getResponseHeader(\"ETag\");\n              uploadedBytes += chunk.size;\n\n              const part = {\n                ETag: etag,\n                PartNumber: partNumber,\n              };\n\n              onPartComplete(part);\n              resolve(part);\n            } else {\n              reject(new Error(`Part upload failed with status ${xhr.status}`));\n            }\n          };\n\n          xhr.onerror = () => reject(new Error(\"Part upload failed\"));\n          xhr.send(chunk);\n        });\n      };\n\n      // Upload parts with concurrency control\n      for (let i = 0; i < totalParts; i += concurrency) {\n        const partNumbers = Array.from(\n          { length: Math.min(concurrency, totalParts - i) },\n          (_, index) => i + index + 1\n        );\n\n        const uploadedParts = await Promise.all(\n          partNumbers.map((partNumber) => uploadPart(partNumber))\n        );\n        parts.push(...uploadedParts);\n      }\n\n      // Complete upload\n      const completeUrl = await getSignedUrl(\"completemultipart\", {\n        uploadId,\n        key: file.name,\n      });\n\n      const completeUpload = () =>\n        new Promise((resolve, reject) => {\n          const xhr = new XMLHttpRequest();\n\n          xhr.open(\"POST\", completeUrl);\n          xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n          xhr.onload = () => {\n            if (xhr.status >= 200 && xhr.status < 300) {\n              const response = JSON.parse(xhr.responseText);\n              onComplete({\n                type: \"complete\",\n                response,\n                timestamp: new Date(),\n                file: {\n                  name: file.name,\n                  size: file.size,\n                  type: file.type,\n                },\n              });\n              resolve(response);\n            } else {\n              reject(\n                new Error(`Complete upload failed with status ${xhr.status}`)\n              );\n            }\n          };\n\n          xhr.onerror = () => reject(new Error(\"Complete upload failed\"));\n          xhr.send(\n            JSON.stringify({\n              parts: parts.sort((a, b) => a.PartNumber - b.PartNumber),\n            })\n          );\n        });\n\n      return await completeUpload();\n    } catch (error) {\n      // If something goes wrong and we have an uploadId, try to cancel the upload\n      if (uploadId) {\n        try {\n          const cancelUrl = await getSignedUrl(\"cancelmultipart\", {\n            uploadId,\n            key: file.name,\n          });\n\n          await new Promise((resolve, reject) => {\n            const xhr = new XMLHttpRequest();\n            xhr.open(\"POST\", cancelUrl);\n            xhr.onload = () => (xhr.status < 300 ? resolve() : reject());\n            xhr.onerror = () => reject();\n            xhr.send();\n          });\n        } catch (cancelError) {\n          console.error(\"Failed to cancel multipart upload:\", cancelError);\n        }\n      }\n\n      onError({\n        type: \"error\",\n        error,\n        phase: \"upload\",\n        timestamp: new Date(),\n      });\n      throw error;\n    }\n  }\n\n  async uploadFile(\n    file,\n    getSignedUrl,\n    {\n      onProgress = () => {},\n      onComplete = () => {},\n      onError = () => {},\n      onStart = () => {},\n      signal,\n    } = {}\n  ) {\n    try {\n      // Get signed URL for upload\n      const signedUrl = await getSignedUrl(\"upload\", {\n        key: file.name,\n        mimeType: file.type,\n      });\n\n      const xhr = new XMLHttpRequest();\n\n      // Setup abort signal handler\n      if (signal?.aborted) {\n        onError({\n          type: \"abort\",\n          error: new Error(\"Upload aborted\"),\n          timestamp: new Date(),\n        });\n        throw new Error(\"Upload aborted\");\n      }\n\n      signal?.addEventListener(\"abort\", () => xhr.abort());\n\n      // Return promise for upload completion\n      return new Promise((resolve, reject) => {\n        xhr.open(\"POST\", signedUrl);\n\n        // Setup progress tracking\n        xhr.upload.onprogress = (event) => {\n          if (event.lengthComputable) {\n            const percentComplete = (event.loaded / event.total) * 100;\n            onProgress({\n              loaded: event.loaded,\n              total: event.total,\n              progress: percentComplete,\n              type: \"progress\",\n            });\n          }\n        };\n\n        // Setup start handler\n        xhr.upload.onloadstart = () => {\n          onStart({\n            type: \"start\",\n            timestamp: new Date(),\n            file: {\n              name: file.name,\n              size: file.size,\n              type: file.type,\n            },\n          });\n        };\n\n        // Setup completion handler\n        xhr.onload = () => {\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              const response = JSON.parse(xhr.responseText);\n              onComplete({\n                type: \"complete\",\n                response,\n                timestamp: new Date(),\n                file: {\n                  name: file.name,\n                  size: file.size,\n                  type: file.type,\n                },\n              });\n              resolve(response);\n            } catch (e) {\n              onComplete({\n                type: \"complete\",\n                response: xhr.responseText,\n                timestamp: new Date(),\n                file: {\n                  name: file.name,\n                  size: file.size,\n                  type: file.type,\n                },\n              });\n              resolve(xhr.responseText);\n            }\n          } else {\n            const error = new Error(`Upload failed with status ${xhr.status}`);\n            onError({\n              type: \"error\",\n              error,\n              status: xhr.status,\n              timestamp: new Date(),\n            });\n            reject(error);\n          }\n        };\n\n        xhr.onerror = () => {\n          const error = new Error(\"Upload failed\");\n          onError({\n            type: \"error\",\n            error,\n            timestamp: new Date(),\n          });\n          reject(error);\n        };\n\n        xhr.onabort = () => {\n          const error = new Error(\"Upload aborted\");\n          onError({\n            type: \"abort\",\n            error,\n            timestamp: new Date(),\n          });\n          reject(error);\n        };\n\n        // Create FormData and send\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        xhr.send(formData);\n      });\n    } catch (error) {\n      onError({\n        type: \"error\",\n        error,\n        timestamp: new Date(),\n      });\n      throw error;\n    }\n  }\n}\n\nexport default ApexxCloud;\n"],"names":["ApexxCloud","constructor","config","baseUrl","files","upload","uploadFile","bind","uploadMultipart","file","getSignedUrl","onProgress","onPartComplete","onComplete","onError","partSize","signal","concurrency","startUrl","key","name","totalParts","Math","ceil","size","mimeType","type","startUpload","Promise","resolve","reject","xhr","XMLHttpRequest","aborted","error","Error","phase","timestamp","Date","open","setRequestHeader","onload","status","JSON","parse","responseText","onerror","send","stringify","filename","contentType","uploadId","parts","uploadedBytes","uploadPart","partNumber","start","end","min","chunk","slice","partUrl","onprogress","event","lengthComputable","partProgress","loaded","total","partLoaded","totalProgress","progress","part","number","etag","getResponseHeader","ETag","PartNumber","i","partNumbers","Array","from","length","_","index","uploadedParts","all","map","push","completeUrl","completeUpload","response","sort","a","b","onStart","signedUrl","addEventListener","abort","percentComplete","onloadstart","e","onabort","formData","FormData","append"],"mappings":"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"}