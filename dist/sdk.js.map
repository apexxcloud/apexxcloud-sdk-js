{"version":3,"file":"sdk.js","sources":["../src/sdk.js"],"sourcesContent":["class ApexxCloud {\n  constructor(config = {}) {\n    this.config = {\n      baseUrl: config.baseUrl || \"https://api.apexxcloud.com\",\n    };\n\n    // Initialize API clients\n    this.files = {\n      upload: this.uploadFile.bind(this),\n    };\n  }\n\n  async uploadFile(\n    signedUrl,\n    file,\n    {\n      onProgress = () => {},\n      onComplete = () => {},\n      onError = () => {},\n      onStart = () => {},\n      signal,\n    } = {}\n  ) {\n    try {\n      const formData = new FormData();\n      formData.append(\"file\", file);\n\n      const xhr = new XMLHttpRequest();\n\n      // Setup abort signal handler\n      if (signal) {\n        signal.addEventListener(\"abort\", () => {\n          xhr.abort();\n        });\n\n        // If signal is already aborted, throw error immediately\n        if (signal.aborted) {\n          onError({\n            type: \"error\",\n            error: new Error(\"Upload aborted\"),\n            originalEvent: event,\n            timestamp: new Date(),\n          });\n          throw new Error(\"Upload aborted\");\n        }\n      }\n\n      // Setup progress tracking\n      xhr.upload.onprogress = (event) => {\n        if (event.lengthComputable) {\n          const percentComplete = (event.loaded / event.total) * 100;\n          onProgress({\n            loaded: event.loaded,\n            total: event.total,\n            progress: percentComplete,\n            type: \"progress\",\n          });\n        }\n      };\n\n      // Return promise for upload completion\n      return new Promise((resolve, reject) => {\n        xhr.open(\"POST\", signedUrl, true);\n\n        // Setup start handler\n        xhr.upload.onloadstart = (event) => {\n          onStart({\n            type: \"start\",\n            timestamp: new Date(),\n            file: {\n              name: file.name,\n              size: file.size,\n              type: file.type,\n            },\n          });\n        };\n\n        // Setup completion handler\n        xhr.onload = () => {\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              const response = JSON.parse(xhr.responseText);\n              onComplete({\n                type: \"complete\",\n                response,\n                timestamp: new Date(),\n              });\n              resolve(response);\n            } catch (e) {\n              onComplete({\n                type: \"complete\",\n                response: xhr.responseText,\n                timestamp: new Date(),\n              });\n              resolve(xhr.responseText);\n            }\n          } else {\n            const error = new Error(`Upload failed with status ${xhr.status}`);\n            onError({\n              type: \"error\",\n              error,\n              status: xhr.status,\n              timestamp: new Date(),\n            });\n            reject(error);\n          }\n        };\n\n        // Setup error handler\n        xhr.onerror = (event) => {\n          const error = new Error(\"Upload failed\");\n          onError({\n            type: \"error\",\n            error,\n            originalEvent: event,\n            timestamp: new Date(),\n          });\n          reject(error);\n        };\n\n        // Setup abort handler\n        xhr.onabort = (event) => {\n          const error = new Error(\"Upload aborted\");\n          onError({\n            type: \"abort\",\n            error,\n            originalEvent: event,\n            timestamp: new Date(),\n          });\n          reject(error);\n        };\n\n        xhr.send(formData);\n      });\n    } catch (error) {\n      onError({\n        type: \"error\",\n        error,\n        timestamp: new Date(),\n      });\n      throw new Error(`Upload failed: ${error.message}`);\n    }\n  }\n}\n\nexport default ApexxCloud;\n"],"names":["ApexxCloud","constructor","config","baseUrl","files","upload","uploadFile","bind","signedUrl","file","onProgress","onComplete","onError","onStart","signal","formData","FormData","append","xhr","XMLHttpRequest","addEventListener","abort","aborted","type","error","Error","originalEvent","event","timestamp","Date","onprogress","lengthComputable","percentComplete","loaded","total","progress","Promise","resolve","reject","open","onloadstart","name","size","onload","status","response","JSON","parse","responseText","e","onerror","onabort","send","message"],"mappings":";;;;;;EAAA,MAAMA,UAAU,CAAC;EACfC,EAAAA,WAAWA,CAACC,MAAM,GAAG,EAAE,EAAE;MACvB,IAAI,CAACA,MAAM,GAAG;EACZC,MAAAA,OAAO,EAAED,MAAM,CAACC,OAAO,IAAI,4BAAA;OAC5B,CAAA;;EAED;MACA,IAAI,CAACC,KAAK,GAAG;EACXC,MAAAA,MAAM,EAAE,IAAI,CAACC,UAAU,CAACC,IAAI,CAAC,IAAI,CAAA;OAClC,CAAA;EACH,GAAA;EAEA,EAAA,MAAMD,UAAUA,CACdE,SAAS,EACTC,IAAI,EACJ;EACEC,IAAAA,UAAU,GAAGA,MAAM,EAAE;EACrBC,IAAAA,UAAU,GAAGA,MAAM,EAAE;EACrBC,IAAAA,OAAO,GAAGA,MAAM,EAAE;EAClBC,IAAAA,OAAO,GAAGA,MAAM,EAAE;EAClBC,IAAAA,MAAAA;KACD,GAAG,EAAE,EACN;MACA,IAAI;EACF,MAAA,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,EAAE,CAAA;EAC/BD,MAAAA,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAER,IAAI,CAAC,CAAA;EAE7B,MAAA,MAAMS,GAAG,GAAG,IAAIC,cAAc,EAAE,CAAA;;EAEhC;EACA,MAAA,IAAIL,MAAM,EAAE;EACVA,QAAAA,MAAM,CAACM,gBAAgB,CAAC,OAAO,EAAE,MAAM;YACrCF,GAAG,CAACG,KAAK,EAAE,CAAA;EACb,SAAC,CAAC,CAAA;;EAEF;UACA,IAAIP,MAAM,CAACQ,OAAO,EAAE;EAClBV,UAAAA,OAAO,CAAC;EACNW,YAAAA,IAAI,EAAE,OAAO;EACbC,YAAAA,KAAK,EAAE,IAAIC,KAAK,CAAC,gBAAgB,CAAC;EAClCC,YAAAA,aAAa,EAAEC,KAAK;cACpBC,SAAS,EAAE,IAAIC,IAAI,EAAC;EACtB,WAAC,CAAC,CAAA;EACF,UAAA,MAAM,IAAIJ,KAAK,CAAC,gBAAgB,CAAC,CAAA;EACnC,SAAA;EACF,OAAA;;EAEA;EACAP,MAAAA,GAAG,CAACb,MAAM,CAACyB,UAAU,GAAIH,KAAK,IAAK;UACjC,IAAIA,KAAK,CAACI,gBAAgB,EAAE;YAC1B,MAAMC,eAAe,GAAIL,KAAK,CAACM,MAAM,GAAGN,KAAK,CAACO,KAAK,GAAI,GAAG,CAAA;EAC1DxB,UAAAA,UAAU,CAAC;cACTuB,MAAM,EAAEN,KAAK,CAACM,MAAM;cACpBC,KAAK,EAAEP,KAAK,CAACO,KAAK;EAClBC,YAAAA,QAAQ,EAAEH,eAAe;EACzBT,YAAAA,IAAI,EAAE,UAAA;EACR,WAAC,CAAC,CAAA;EACJ,SAAA;SACD,CAAA;;EAED;EACA,MAAA,OAAO,IAAIa,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;UACtCpB,GAAG,CAACqB,IAAI,CAAC,MAAM,EAAE/B,SAAS,EAAE,IAAI,CAAC,CAAA;;EAEjC;EACAU,QAAAA,GAAG,CAACb,MAAM,CAACmC,WAAW,GAAIb,KAAK,IAAK;EAClCd,UAAAA,OAAO,CAAC;EACNU,YAAAA,IAAI,EAAE,OAAO;EACbK,YAAAA,SAAS,EAAE,IAAIC,IAAI,EAAE;EACrBpB,YAAAA,IAAI,EAAE;gBACJgC,IAAI,EAAEhC,IAAI,CAACgC,IAAI;gBACfC,IAAI,EAAEjC,IAAI,CAACiC,IAAI;gBACfnB,IAAI,EAAEd,IAAI,CAACc,IAAAA;EACb,aAAA;EACF,WAAC,CAAC,CAAA;WACH,CAAA;;EAED;UACAL,GAAG,CAACyB,MAAM,GAAG,MAAM;YACjB,IAAIzB,GAAG,CAAC0B,MAAM,IAAI,GAAG,IAAI1B,GAAG,CAAC0B,MAAM,GAAG,GAAG,EAAE;cACzC,IAAI;gBACF,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAAC7B,GAAG,CAAC8B,YAAY,CAAC,CAAA;EAC7CrC,cAAAA,UAAU,CAAC;EACTY,gBAAAA,IAAI,EAAE,UAAU;kBAChBsB,QAAQ;kBACRjB,SAAS,EAAE,IAAIC,IAAI,EAAC;EACtB,eAAC,CAAC,CAAA;gBACFQ,OAAO,CAACQ,QAAQ,CAAC,CAAA;eAClB,CAAC,OAAOI,CAAC,EAAE;EACVtC,cAAAA,UAAU,CAAC;EACTY,gBAAAA,IAAI,EAAE,UAAU;kBAChBsB,QAAQ,EAAE3B,GAAG,CAAC8B,YAAY;kBAC1BpB,SAAS,EAAE,IAAIC,IAAI,EAAC;EACtB,eAAC,CAAC,CAAA;EACFQ,cAAAA,OAAO,CAACnB,GAAG,CAAC8B,YAAY,CAAC,CAAA;EAC3B,aAAA;EACF,WAAC,MAAM;cACL,MAAMxB,KAAK,GAAG,IAAIC,KAAK,CAAC,6BAA6BP,GAAG,CAAC0B,MAAM,CAAA,CAAE,CAAC,CAAA;EAClEhC,YAAAA,OAAO,CAAC;EACNW,cAAAA,IAAI,EAAE,OAAO;gBACbC,KAAK;gBACLoB,MAAM,EAAE1B,GAAG,CAAC0B,MAAM;gBAClBhB,SAAS,EAAE,IAAIC,IAAI,EAAC;EACtB,aAAC,CAAC,CAAA;cACFS,MAAM,CAACd,KAAK,CAAC,CAAA;EACf,WAAA;WACD,CAAA;;EAED;EACAN,QAAAA,GAAG,CAACgC,OAAO,GAAIvB,KAAK,IAAK;EACvB,UAAA,MAAMH,KAAK,GAAG,IAAIC,KAAK,CAAC,eAAe,CAAC,CAAA;EACxCb,UAAAA,OAAO,CAAC;EACNW,YAAAA,IAAI,EAAE,OAAO;cACbC,KAAK;EACLE,YAAAA,aAAa,EAAEC,KAAK;cACpBC,SAAS,EAAE,IAAIC,IAAI,EAAC;EACtB,WAAC,CAAC,CAAA;YACFS,MAAM,CAACd,KAAK,CAAC,CAAA;WACd,CAAA;;EAED;EACAN,QAAAA,GAAG,CAACiC,OAAO,GAAIxB,KAAK,IAAK;EACvB,UAAA,MAAMH,KAAK,GAAG,IAAIC,KAAK,CAAC,gBAAgB,CAAC,CAAA;EACzCb,UAAAA,OAAO,CAAC;EACNW,YAAAA,IAAI,EAAE,OAAO;cACbC,KAAK;EACLE,YAAAA,aAAa,EAAEC,KAAK;cACpBC,SAAS,EAAE,IAAIC,IAAI,EAAC;EACtB,WAAC,CAAC,CAAA;YACFS,MAAM,CAACd,KAAK,CAAC,CAAA;WACd,CAAA;EAEDN,QAAAA,GAAG,CAACkC,IAAI,CAACrC,QAAQ,CAAC,CAAA;EACpB,OAAC,CAAC,CAAA;OACH,CAAC,OAAOS,KAAK,EAAE;EACdZ,MAAAA,OAAO,CAAC;EACNW,QAAAA,IAAI,EAAE,OAAO;UACbC,KAAK;UACLI,SAAS,EAAE,IAAIC,IAAI,EAAC;EACtB,OAAC,CAAC,CAAA;QACF,MAAM,IAAIJ,KAAK,CAAC,CAAA,eAAA,EAAkBD,KAAK,CAAC6B,OAAO,EAAE,CAAC,CAAA;EACpD,KAAA;EACF,GAAA;EACF;;;;;;;;"}