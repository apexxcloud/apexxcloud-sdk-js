{"version":3,"file":"sdk.js","sources":["../src/sdk.js"],"sourcesContent":["class ApexxCloud {\n  constructor(config = {}) {\n    this.config = {\n      baseUrl: config.baseUrl || \"https://api.apexxcloud.com\",\n    };\n\n    // Initialize API clients\n    this.files = {\n      upload: this.uploadFile.bind(this),\n      uploadMultipart: this.uploadMultipart.bind(this),\n    };\n  }\n\n  async uploadMultipart(\n    file,\n    getSignedUrl,\n    {\n      onProgress = () => {},\n      onPartComplete = () => {},\n      onComplete = () => {},\n      onError = () => {},\n      partSize = 5 * 1024 * 1024,\n      signal,\n      concurrency = 3,\n    } = {}\n  ) {\n    let uploadId;\n    try {\n      // Start multipart upload\n      const startUrl = await getSignedUrl(\"start-multipart\", {\n        key: file.name,\n        totalParts: Math.ceil(file.size / partSize),\n        mimeType: file.type,\n      });\n\n      const startUpload = () =>\n        new Promise((resolve, reject) => {\n          const xhr = new XMLHttpRequest();\n\n          if (signal?.aborted) {\n            onError({\n              type: \"abort\",\n              error: new Error(\"Upload aborted\"),\n              phase: \"start\",\n              timestamp: new Date(),\n            });\n            reject(new Error(\"Upload aborted\"));\n            return;\n          }\n\n          xhr.open(\"POST\", startUrl);\n          xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n          xhr.onload = () => {\n            if (xhr.status >= 200 && xhr.status < 300) {\n              const response = JSON.parse(xhr.responseText);\n              resolve(JSON.parse(xhr.responseText));\n            } else {\n              const error = new Error(\n                `Start upload failed with status ${xhr.status}`\n              );\n              onError({\n                type: \"error\",\n                error,\n                phase: \"start\",\n                status: xhr.status,\n                timestamp: new Date(),\n              });\n              reject(error);\n            }\n          };\n\n          xhr.onerror = () => {\n            const error = new Error(\"Start upload failed\");\n            onError({\n              type: \"error\",\n              error,\n              phase: \"start\",\n              timestamp: new Date(),\n            });\n            reject(error);\n          };\n\n          xhr.send(\n            JSON.stringify({\n              filename: file.name,\n              contentType: file.type,\n              size: file.size,\n            })\n          );\n        });\n\n      const { uploadId } = await startUpload();\n\n      // Calculate parts\n      const totalParts = Math.ceil(file.size / partSize);\n      const parts = [];\n      let uploadedBytes = 0;\n\n      // Upload parts with concurrency control\n      const uploadPart = async (partNumber) => {\n        const start = (partNumber - 1) * partSize;\n        const end = Math.min(start + partSize, file.size);\n        const chunk = file.slice(start, end);\n\n        const partUrl = await getSignedUrl(\"uploadpart\", {\n          uploadId,\n          partNumber,\n          key: file.name,\n          totalParts,\n        });\n\n        return new Promise((resolve, reject) => {\n          const xhr = new XMLHttpRequest();\n\n          if (signal?.aborted) {\n            reject(new Error(\"Upload aborted\"));\n            return;\n          }\n\n          xhr.upload.onprogress = (event) => {\n            if (event.lengthComputable) {\n              const partProgress = event.loaded / event.total;\n              const partSize = end - start;\n              const partLoaded = partSize * partProgress;\n\n              const totalProgress =\n                ((uploadedBytes + partLoaded) / file.size) * 100;\n\n              onProgress({\n                loaded: uploadedBytes + partLoaded,\n                total: file.size,\n                progress: totalProgress,\n                part: {\n                  number: partNumber,\n                  progress: partProgress * 100,\n                },\n              });\n            }\n          };\n\n          xhr.open(\"POST\", partUrl);\n\n          xhr.onload = () => {\n            if (xhr.status >= 200 && xhr.status < 300) {\n              const etag = xhr.getResponseHeader(\"ETag\");\n              uploadedBytes += chunk.size;\n\n              const part = {\n                ETag: etag,\n                PartNumber: partNumber,\n              };\n\n              onPartComplete(part);\n              resolve(part);\n            } else {\n              let errorMessage;\n              try {\n                const errorResponse = JSON.parse(xhr.responseText);\n                errorMessage =\n                  errorResponse.message ||\n                  `Part upload failed with status ${xhr.status}`;\n              } catch (e) {\n                errorMessage =\n                  xhr.responseText ||\n                  `Part upload failed with status ${xhr.status}`;\n              }\n\n              const error = new Error(errorMessage);\n              onError({\n                type: \"error\",\n                error,\n                phase: \"upload\",\n                partNumber,\n                status: xhr.status,\n                timestamp: new Date(),\n              });\n              reject(error);\n            }\n          };\n\n          xhr.onerror = () => reject(new Error(\"Part upload failed\"));\n          xhr.send(chunk);\n        });\n      };\n\n      // Upload parts with concurrency control\n      for (let i = 0; i < totalParts; i += concurrency) {\n        const partNumbers = Array.from(\n          { length: Math.min(concurrency, totalParts - i) },\n          (_, index) => i + index + 1\n        );\n\n        const uploadedParts = await Promise.all(\n          partNumbers.map((partNumber) => uploadPart(partNumber))\n        );\n        parts.push(...uploadedParts);\n      }\n\n      // Complete upload\n      const completeUrl = await getSignedUrl(\"completemultipart\", {\n        uploadId,\n        key: file.name,\n      });\n\n      const completeUpload = () =>\n        new Promise((resolve, reject) => {\n          const xhr = new XMLHttpRequest();\n\n          xhr.open(\"POST\", completeUrl);\n          xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n          xhr.onload = () => {\n            if (xhr.status >= 200 && xhr.status < 300) {\n              const response = JSON.parse(xhr.responseText);\n              onComplete({\n                type: \"complete\",\n                response,\n                timestamp: new Date(),\n                file: {\n                  name: file.name,\n                  size: file.size,\n                  type: file.type,\n                },\n              });\n              resolve(response);\n            } else {\n              reject(\n                new Error(`Complete upload failed with status ${xhr.status}`)\n              );\n            }\n          };\n\n          xhr.onerror = () => reject(new Error(\"Complete upload failed\"));\n          xhr.send(\n            JSON.stringify({\n              parts: parts.sort((a, b) => a.PartNumber - b.PartNumber),\n            })\n          );\n        });\n\n      return await completeUpload();\n    } catch (error) {\n      // If something goes wrong and we have an uploadId, try to cancel the upload\n      if (uploadId) {\n        try {\n          const cancelUrl = await getSignedUrl(\"cancelmultipart\", {\n            uploadId,\n            key: file.name,\n          });\n\n          await new Promise((resolve, reject) => {\n            const xhr = new XMLHttpRequest();\n            xhr.open(\"DELETE\", cancelUrl);\n            xhr.onload = () => (xhr.status < 300 ? resolve() : reject());\n            xhr.onerror = () => reject();\n            xhr.send();\n          });\n        } catch (cancelError) {\n          console.error(\"Failed to cancel multipart upload:\", cancelError);\n        }\n      }\n\n      onError({\n        type: \"error\",\n        error,\n        phase: \"upload\",\n        timestamp: new Date(),\n      });\n      throw error;\n    }\n  }\n\n  async uploadFile(\n    file,\n    getSignedUrl,\n    {\n      onProgress = () => {},\n      onComplete = () => {},\n      onError = () => {},\n      onStart = () => {},\n      signal,\n    } = {}\n  ) {\n    try {\n      // Get signed URL for upload\n      const signedUrl = await getSignedUrl(\"upload\", {\n        key: file.name,\n        mimeType: file.type,\n      });\n\n      const xhr = new XMLHttpRequest();\n\n      // Setup abort signal handler\n      if (signal?.aborted) {\n        onError({\n          type: \"abort\",\n          error: new Error(\"Upload aborted\"),\n          timestamp: new Date(),\n        });\n        throw new Error(\"Upload aborted\");\n      }\n\n      signal?.addEventListener(\"abort\", () => xhr.abort());\n\n      // Return promise for upload completion\n      return new Promise((resolve, reject) => {\n        xhr.open(\"PUT\", signedUrl);\n\n        // Setup progress tracking\n        xhr.upload.onprogress = (event) => {\n          if (event.lengthComputable) {\n            const percentComplete = (event.loaded / event.total) * 100;\n            onProgress({\n              loaded: event.loaded,\n              total: event.total,\n              progress: percentComplete,\n              type: \"progress\",\n            });\n          }\n        };\n\n        // Setup start handler\n        xhr.upload.onloadstart = () => {\n          onStart({\n            type: \"start\",\n            timestamp: new Date(),\n            file: {\n              name: file.name,\n              size: file.size,\n              type: file.type,\n            },\n          });\n        };\n\n        // Setup completion handler\n        xhr.onload = () => {\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              const response = JSON.parse(xhr.responseText);\n              onComplete({\n                type: \"complete\",\n                response,\n                timestamp: new Date(),\n                file: {\n                  name: file.name,\n                  size: file.size,\n                  type: file.type,\n                },\n              });\n              resolve(response);\n            } catch (e) {\n              onComplete({\n                type: \"complete\",\n                response: xhr.responseText,\n                timestamp: new Date(),\n                file: {\n                  name: file.name,\n                  size: file.size,\n                  type: file.type,\n                },\n              });\n              resolve(xhr.responseText);\n            }\n          } else {\n            const error = new Error(`Upload failed with status ${xhr.status}`);\n            onError({\n              type: \"error\",\n              error,\n              status: xhr.status,\n              timestamp: new Date(),\n            });\n            reject(error);\n          }\n        };\n\n        xhr.onerror = () => {\n          const error = new Error(\"Upload failed\");\n          onError({\n            type: \"error\",\n            error,\n            timestamp: new Date(),\n          });\n          reject(error);\n        };\n\n        xhr.onabort = () => {\n          const error = new Error(\"Upload aborted\");\n          onError({\n            type: \"abort\",\n            error,\n            timestamp: new Date(),\n          });\n          reject(error);\n        };\n\n        // Create FormData and send\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        xhr.send(formData);\n      });\n    } catch (error) {\n      onError({\n        type: \"error\",\n        error,\n        timestamp: new Date(),\n      });\n      throw error;\n    }\n  }\n}\n\nexport default ApexxCloud;\n"],"names":["ApexxCloud","constructor","config","baseUrl","files","upload","uploadFile","bind","uploadMultipart","file","getSignedUrl","onProgress","onPartComplete","onComplete","onError","partSize","signal","concurrency","startUrl","key","name","totalParts","Math","ceil","size","mimeType","type","startUpload","Promise","resolve","reject","xhr","XMLHttpRequest","aborted","error","Error","phase","timestamp","Date","open","setRequestHeader","onload","status","response","JSON","parse","responseText","onerror","send","stringify","filename","contentType","uploadId","parts","uploadedBytes","uploadPart","partNumber","start","end","min","chunk","slice","partUrl","onprogress","event","lengthComputable","partProgress","loaded","total","partLoaded","totalProgress","progress","part","number","etag","getResponseHeader","ETag","PartNumber","errorMessage","errorResponse","message","e","i","partNumbers","Array","from","length","_","index","uploadedParts","all","map","push","completeUrl","completeUpload","sort","a","b","onStart","signedUrl","addEventListener","abort","percentComplete","onloadstart","onabort","formData","FormData","append"],"mappings":";;;;;;EAAA,MAAMA,UAAU,CAAC;EACfC,EAAAA,WAAWA,CAACC,MAAM,GAAG,EAAE,EAAE;MACvB,IAAI,CAACA,MAAM,GAAG;EACZC,MAAAA,OAAO,EAAED,MAAM,CAACC,OAAO,IAAI,4BAAA;OAC5B,CAAA;;EAED;MACA,IAAI,CAACC,KAAK,GAAG;QACXC,MAAM,EAAE,IAAI,CAACC,UAAU,CAACC,IAAI,CAAC,IAAI,CAAC;EAClCC,MAAAA,eAAe,EAAE,IAAI,CAACA,eAAe,CAACD,IAAI,CAAC,IAAI,CAAA;OAChD,CAAA;EACH,GAAA;EAEA,EAAA,MAAMC,eAAeA,CACnBC,IAAI,EACJC,YAAY,EACZ;EACEC,IAAAA,UAAU,GAAGA,MAAM,EAAE;EACrBC,IAAAA,cAAc,GAAGA,MAAM,EAAE;EACzBC,IAAAA,UAAU,GAAGA,MAAM,EAAE;EACrBC,IAAAA,OAAO,GAAGA,MAAM,EAAE;EAClBC,IAAAA,QAAQ,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI;MAC1BC,MAAM;EACNC,IAAAA,WAAW,GAAG,CAAA;KACf,GAAG,EAAE,EACN;MAEA,IAAI;EACF;EACA,MAAA,MAAMC,QAAQ,GAAG,MAAMR,YAAY,CAAC,iBAAiB,EAAE;UACrDS,GAAG,EAAEV,IAAI,CAACW,IAAI;UACdC,UAAU,EAAEC,IAAI,CAACC,IAAI,CAACd,IAAI,CAACe,IAAI,GAAGT,QAAQ,CAAC;UAC3CU,QAAQ,EAAEhB,IAAI,CAACiB,IAAAA;EACjB,OAAC,CAAC,CAAA;QAEF,MAAMC,WAAW,GAAGA,MAClB,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC/B,QAAA,MAAMC,GAAG,GAAG,IAAIC,cAAc,EAAE,CAAA;UAEhC,IAAIhB,MAAM,EAAEiB,OAAO,EAAE;EACnBnB,UAAAA,OAAO,CAAC;EACNY,YAAAA,IAAI,EAAE,OAAO;EACbQ,YAAAA,KAAK,EAAE,IAAIC,KAAK,CAAC,gBAAgB,CAAC;EAClCC,YAAAA,KAAK,EAAE,OAAO;cACdC,SAAS,EAAE,IAAIC,IAAI,EAAC;EACtB,WAAC,CAAC,CAAA;EACFR,UAAAA,MAAM,CAAC,IAAIK,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAA;EACnC,UAAA,OAAA;EACF,SAAA;EAEAJ,QAAAA,GAAG,CAACQ,IAAI,CAAC,MAAM,EAAErB,QAAQ,CAAC,CAAA;EAC1Ba,QAAAA,GAAG,CAACS,gBAAgB,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAA;UAExDT,GAAG,CAACU,MAAM,GAAG,MAAM;YACjB,IAAIV,GAAG,CAACW,MAAM,IAAI,GAAG,IAAIX,GAAG,CAACW,MAAM,GAAG,GAAG,EAAE;cACzC,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACd,GAAG,CAACe,YAAY,CAAC,CAAA;cAC7CjB,OAAO,CAACe,IAAI,CAACC,KAAK,CAACd,GAAG,CAACe,YAAY,CAAC,CAAC,CAAA;EACvC,WAAC,MAAM;cACL,MAAMZ,KAAK,GAAG,IAAIC,KAAK,CACrB,mCAAmCJ,GAAG,CAACW,MAAM,CAAA,CAC/C,CAAC,CAAA;EACD5B,YAAAA,OAAO,CAAC;EACNY,cAAAA,IAAI,EAAE,OAAO;gBACbQ,KAAK;EACLE,cAAAA,KAAK,EAAE,OAAO;gBACdM,MAAM,EAAEX,GAAG,CAACW,MAAM;gBAClBL,SAAS,EAAE,IAAIC,IAAI,EAAC;EACtB,aAAC,CAAC,CAAA;cACFR,MAAM,CAACI,KAAK,CAAC,CAAA;EACf,WAAA;WACD,CAAA;UAEDH,GAAG,CAACgB,OAAO,GAAG,MAAM;EAClB,UAAA,MAAMb,KAAK,GAAG,IAAIC,KAAK,CAAC,qBAAqB,CAAC,CAAA;EAC9CrB,UAAAA,OAAO,CAAC;EACNY,YAAAA,IAAI,EAAE,OAAO;cACbQ,KAAK;EACLE,YAAAA,KAAK,EAAE,OAAO;cACdC,SAAS,EAAE,IAAIC,IAAI,EAAC;EACtB,WAAC,CAAC,CAAA;YACFR,MAAM,CAACI,KAAK,CAAC,CAAA;WACd,CAAA;EAEDH,QAAAA,GAAG,CAACiB,IAAI,CACNJ,IAAI,CAACK,SAAS,CAAC;YACbC,QAAQ,EAAEzC,IAAI,CAACW,IAAI;YACnB+B,WAAW,EAAE1C,IAAI,CAACiB,IAAI;YACtBF,IAAI,EAAEf,IAAI,CAACe,IAAAA;EACb,SAAC,CACH,CAAC,CAAA;EACH,OAAC,CAAC,CAAA;QAEJ,MAAM;EAAE4B,QAAAA,QAAAA;EAAS,OAAC,GAAG,MAAMzB,WAAW,EAAE,CAAA;;EAExC;QACA,MAAMN,UAAU,GAAGC,IAAI,CAACC,IAAI,CAACd,IAAI,CAACe,IAAI,GAAGT,QAAQ,CAAC,CAAA;QAClD,MAAMsC,KAAK,GAAG,EAAE,CAAA;QAChB,IAAIC,aAAa,GAAG,CAAC,CAAA;;EAErB;EACA,MAAA,MAAMC,UAAU,GAAG,MAAOC,UAAU,IAAK;EACvC,QAAA,MAAMC,KAAK,GAAG,CAACD,UAAU,GAAG,CAAC,IAAIzC,QAAQ,CAAA;EACzC,QAAA,MAAM2C,GAAG,GAAGpC,IAAI,CAACqC,GAAG,CAACF,KAAK,GAAG1C,QAAQ,EAAEN,IAAI,CAACe,IAAI,CAAC,CAAA;UACjD,MAAMoC,KAAK,GAAGnD,IAAI,CAACoD,KAAK,CAACJ,KAAK,EAAEC,GAAG,CAAC,CAAA;EAEpC,QAAA,MAAMI,OAAO,GAAG,MAAMpD,YAAY,CAAC,YAAY,EAAE;YAC/C0C,QAAQ;YACRI,UAAU;YACVrC,GAAG,EAAEV,IAAI,CAACW,IAAI;EACdC,UAAAA,UAAAA;EACF,SAAC,CAAC,CAAA;EAEF,QAAA,OAAO,IAAIO,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EACtC,UAAA,MAAMC,GAAG,GAAG,IAAIC,cAAc,EAAE,CAAA;YAEhC,IAAIhB,MAAM,EAAEiB,OAAO,EAAE;EACnBH,YAAAA,MAAM,CAAC,IAAIK,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAA;EACnC,YAAA,OAAA;EACF,WAAA;EAEAJ,UAAAA,GAAG,CAAC1B,MAAM,CAAC0D,UAAU,GAAIC,KAAK,IAAK;cACjC,IAAIA,KAAK,CAACC,gBAAgB,EAAE;gBAC1B,MAAMC,YAAY,GAAGF,KAAK,CAACG,MAAM,GAAGH,KAAK,CAACI,KAAK,CAAA;EAC/C,cAAA,MAAMrD,QAAQ,GAAG2C,GAAG,GAAGD,KAAK,CAAA;EAC5B,cAAA,MAAMY,UAAU,GAAGtD,QAAQ,GAAGmD,YAAY,CAAA;gBAE1C,MAAMI,aAAa,GAChB,CAAChB,aAAa,GAAGe,UAAU,IAAI5D,IAAI,CAACe,IAAI,GAAI,GAAG,CAAA;EAElDb,cAAAA,UAAU,CAAC;kBACTwD,MAAM,EAAEb,aAAa,GAAGe,UAAU;kBAClCD,KAAK,EAAE3D,IAAI,CAACe,IAAI;EAChB+C,gBAAAA,QAAQ,EAAED,aAAa;EACvBE,gBAAAA,IAAI,EAAE;EACJC,kBAAAA,MAAM,EAAEjB,UAAU;oBAClBe,QAAQ,EAAEL,YAAY,GAAG,GAAA;EAC3B,iBAAA;EACF,eAAC,CAAC,CAAA;EACJ,aAAA;aACD,CAAA;EAEDnC,UAAAA,GAAG,CAACQ,IAAI,CAAC,MAAM,EAAEuB,OAAO,CAAC,CAAA;YAEzB/B,GAAG,CAACU,MAAM,GAAG,MAAM;cACjB,IAAIV,GAAG,CAACW,MAAM,IAAI,GAAG,IAAIX,GAAG,CAACW,MAAM,GAAG,GAAG,EAAE;EACzC,cAAA,MAAMgC,IAAI,GAAG3C,GAAG,CAAC4C,iBAAiB,CAAC,MAAM,CAAC,CAAA;gBAC1CrB,aAAa,IAAIM,KAAK,CAACpC,IAAI,CAAA;EAE3B,cAAA,MAAMgD,IAAI,GAAG;EACXI,gBAAAA,IAAI,EAAEF,IAAI;EACVG,gBAAAA,UAAU,EAAErB,UAAAA;iBACb,CAAA;gBAED5C,cAAc,CAAC4D,IAAI,CAAC,CAAA;gBACpB3C,OAAO,CAAC2C,IAAI,CAAC,CAAA;EACf,aAAC,MAAM;EACL,cAAA,IAAIM,YAAY,CAAA;gBAChB,IAAI;kBACF,MAAMC,aAAa,GAAGnC,IAAI,CAACC,KAAK,CAACd,GAAG,CAACe,YAAY,CAAC,CAAA;kBAClDgC,YAAY,GACVC,aAAa,CAACC,OAAO,IACrB,CAAkCjD,+BAAAA,EAAAA,GAAG,CAACW,MAAM,CAAE,CAAA,CAAA;iBACjD,CAAC,OAAOuC,CAAC,EAAE;kBACVH,YAAY,GACV/C,GAAG,CAACe,YAAY,IAChB,CAAkCf,+BAAAA,EAAAA,GAAG,CAACW,MAAM,CAAE,CAAA,CAAA;EAClD,eAAA;EAEA,cAAA,MAAMR,KAAK,GAAG,IAAIC,KAAK,CAAC2C,YAAY,CAAC,CAAA;EACrChE,cAAAA,OAAO,CAAC;EACNY,gBAAAA,IAAI,EAAE,OAAO;kBACbQ,KAAK;EACLE,gBAAAA,KAAK,EAAE,QAAQ;kBACfoB,UAAU;kBACVd,MAAM,EAAEX,GAAG,CAACW,MAAM;kBAClBL,SAAS,EAAE,IAAIC,IAAI,EAAC;EACtB,eAAC,CAAC,CAAA;gBACFR,MAAM,CAACI,KAAK,CAAC,CAAA;EACf,aAAA;aACD,CAAA;YAEDH,GAAG,CAACgB,OAAO,GAAG,MAAMjB,MAAM,CAAC,IAAIK,KAAK,CAAC,oBAAoB,CAAC,CAAC,CAAA;EAC3DJ,UAAAA,GAAG,CAACiB,IAAI,CAACY,KAAK,CAAC,CAAA;EACjB,SAAC,CAAC,CAAA;SACH,CAAA;;EAED;EACA,MAAA,KAAK,IAAIsB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG7D,UAAU,EAAE6D,CAAC,IAAIjE,WAAW,EAAE;EAChD,QAAA,MAAMkE,WAAW,GAAGC,KAAK,CAACC,IAAI,CAC5B;YAAEC,MAAM,EAAEhE,IAAI,CAACqC,GAAG,CAAC1C,WAAW,EAAEI,UAAU,GAAG6D,CAAC,CAAA;WAAG,EACjD,CAACK,CAAC,EAAEC,KAAK,KAAKN,CAAC,GAAGM,KAAK,GAAG,CAC5B,CAAC,CAAA;EAED,QAAA,MAAMC,aAAa,GAAG,MAAM7D,OAAO,CAAC8D,GAAG,CACrCP,WAAW,CAACQ,GAAG,CAAEnC,UAAU,IAAKD,UAAU,CAACC,UAAU,CAAC,CACxD,CAAC,CAAA;EACDH,QAAAA,KAAK,CAACuC,IAAI,CAAC,GAAGH,aAAa,CAAC,CAAA;EAC9B,OAAA;;EAEA;EACA,MAAA,MAAMI,WAAW,GAAG,MAAMnF,YAAY,CAAC,mBAAmB,EAAE;UAC1D0C,QAAQ;UACRjC,GAAG,EAAEV,IAAI,CAACW,IAAAA;EACZ,OAAC,CAAC,CAAA;QAEF,MAAM0E,cAAc,GAAGA,MACrB,IAAIlE,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EAC/B,QAAA,MAAMC,GAAG,GAAG,IAAIC,cAAc,EAAE,CAAA;EAEhCD,QAAAA,GAAG,CAACQ,IAAI,CAAC,MAAM,EAAEsD,WAAW,CAAC,CAAA;EAC7B9D,QAAAA,GAAG,CAACS,gBAAgB,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAA;UAExDT,GAAG,CAACU,MAAM,GAAG,MAAM;YACjB,IAAIV,GAAG,CAACW,MAAM,IAAI,GAAG,IAAIX,GAAG,CAACW,MAAM,GAAG,GAAG,EAAE;cACzC,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACd,GAAG,CAACe,YAAY,CAAC,CAAA;EAC7CjC,YAAAA,UAAU,CAAC;EACTa,cAAAA,IAAI,EAAE,UAAU;gBAChBiB,QAAQ;EACRN,cAAAA,SAAS,EAAE,IAAIC,IAAI,EAAE;EACrB7B,cAAAA,IAAI,EAAE;kBACJW,IAAI,EAAEX,IAAI,CAACW,IAAI;kBACfI,IAAI,EAAEf,IAAI,CAACe,IAAI;kBACfE,IAAI,EAAEjB,IAAI,CAACiB,IAAAA;EACb,eAAA;EACF,aAAC,CAAC,CAAA;cACFG,OAAO,CAACc,QAAQ,CAAC,CAAA;EACnB,WAAC,MAAM;cACLb,MAAM,CACJ,IAAIK,KAAK,CAAC,CAAA,mCAAA,EAAsCJ,GAAG,CAACW,MAAM,CAAE,CAAA,CAC9D,CAAC,CAAA;EACH,WAAA;WACD,CAAA;UAEDX,GAAG,CAACgB,OAAO,GAAG,MAAMjB,MAAM,CAAC,IAAIK,KAAK,CAAC,wBAAwB,CAAC,CAAC,CAAA;EAC/DJ,QAAAA,GAAG,CAACiB,IAAI,CACNJ,IAAI,CAACK,SAAS,CAAC;EACbI,UAAAA,KAAK,EAAEA,KAAK,CAAC0C,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACnB,UAAU,GAAGoB,CAAC,CAACpB,UAAU,CAAA;EACzD,SAAC,CACH,CAAC,CAAA;EACH,OAAC,CAAC,CAAA;QAEJ,OAAO,MAAMiB,cAAc,EAAE,CAAA;OAC9B,CAAC,OAAO5D,KAAK,EAAE;EAqBdpB,MAAAA,OAAO,CAAC;EACNY,QAAAA,IAAI,EAAE,OAAO;UACbQ,KAAK;EACLE,QAAAA,KAAK,EAAE,QAAQ;UACfC,SAAS,EAAE,IAAIC,IAAI,EAAC;EACtB,OAAC,CAAC,CAAA;EACF,MAAA,MAAMJ,KAAK,CAAA;EACb,KAAA;EACF,GAAA;EAEA,EAAA,MAAM5B,UAAUA,CACdG,IAAI,EACJC,YAAY,EACZ;EACEC,IAAAA,UAAU,GAAGA,MAAM,EAAE;EACrBE,IAAAA,UAAU,GAAGA,MAAM,EAAE;EACrBC,IAAAA,OAAO,GAAGA,MAAM,EAAE;EAClBoF,IAAAA,OAAO,GAAGA,MAAM,EAAE;EAClBlF,IAAAA,MAAAA;KACD,GAAG,EAAE,EACN;MACA,IAAI;EACF;EACA,MAAA,MAAMmF,SAAS,GAAG,MAAMzF,YAAY,CAAC,QAAQ,EAAE;UAC7CS,GAAG,EAAEV,IAAI,CAACW,IAAI;UACdK,QAAQ,EAAEhB,IAAI,CAACiB,IAAAA;EACjB,OAAC,CAAC,CAAA;EAEF,MAAA,MAAMK,GAAG,GAAG,IAAIC,cAAc,EAAE,CAAA;;EAEhC;QACA,IAAIhB,MAAM,EAAEiB,OAAO,EAAE;EACnBnB,QAAAA,OAAO,CAAC;EACNY,UAAAA,IAAI,EAAE,OAAO;EACbQ,UAAAA,KAAK,EAAE,IAAIC,KAAK,CAAC,gBAAgB,CAAC;YAClCE,SAAS,EAAE,IAAIC,IAAI,EAAC;EACtB,SAAC,CAAC,CAAA;EACF,QAAA,MAAM,IAAIH,KAAK,CAAC,gBAAgB,CAAC,CAAA;EACnC,OAAA;QAEAnB,MAAM,EAAEoF,gBAAgB,CAAC,OAAO,EAAE,MAAMrE,GAAG,CAACsE,KAAK,EAAE,CAAC,CAAA;;EAEpD;EACA,MAAA,OAAO,IAAIzE,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;EACtCC,QAAAA,GAAG,CAACQ,IAAI,CAAC,KAAK,EAAE4D,SAAS,CAAC,CAAA;;EAE1B;EACApE,QAAAA,GAAG,CAAC1B,MAAM,CAAC0D,UAAU,GAAIC,KAAK,IAAK;YACjC,IAAIA,KAAK,CAACC,gBAAgB,EAAE;cAC1B,MAAMqC,eAAe,GAAItC,KAAK,CAACG,MAAM,GAAGH,KAAK,CAACI,KAAK,GAAI,GAAG,CAAA;EAC1DzD,YAAAA,UAAU,CAAC;gBACTwD,MAAM,EAAEH,KAAK,CAACG,MAAM;gBACpBC,KAAK,EAAEJ,KAAK,CAACI,KAAK;EAClBG,cAAAA,QAAQ,EAAE+B,eAAe;EACzB5E,cAAAA,IAAI,EAAE,UAAA;EACR,aAAC,CAAC,CAAA;EACJ,WAAA;WACD,CAAA;;EAED;EACAK,QAAAA,GAAG,CAAC1B,MAAM,CAACkG,WAAW,GAAG,MAAM;EAC7BL,UAAAA,OAAO,CAAC;EACNxE,YAAAA,IAAI,EAAE,OAAO;EACbW,YAAAA,SAAS,EAAE,IAAIC,IAAI,EAAE;EACrB7B,YAAAA,IAAI,EAAE;gBACJW,IAAI,EAAEX,IAAI,CAACW,IAAI;gBACfI,IAAI,EAAEf,IAAI,CAACe,IAAI;gBACfE,IAAI,EAAEjB,IAAI,CAACiB,IAAAA;EACb,aAAA;EACF,WAAC,CAAC,CAAA;WACH,CAAA;;EAED;UACAK,GAAG,CAACU,MAAM,GAAG,MAAM;YACjB,IAAIV,GAAG,CAACW,MAAM,IAAI,GAAG,IAAIX,GAAG,CAACW,MAAM,GAAG,GAAG,EAAE;cACzC,IAAI;gBACF,MAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACd,GAAG,CAACe,YAAY,CAAC,CAAA;EAC7CjC,cAAAA,UAAU,CAAC;EACTa,gBAAAA,IAAI,EAAE,UAAU;kBAChBiB,QAAQ;EACRN,gBAAAA,SAAS,EAAE,IAAIC,IAAI,EAAE;EACrB7B,gBAAAA,IAAI,EAAE;oBACJW,IAAI,EAAEX,IAAI,CAACW,IAAI;oBACfI,IAAI,EAAEf,IAAI,CAACe,IAAI;oBACfE,IAAI,EAAEjB,IAAI,CAACiB,IAAAA;EACb,iBAAA;EACF,eAAC,CAAC,CAAA;gBACFG,OAAO,CAACc,QAAQ,CAAC,CAAA;eAClB,CAAC,OAAOsC,CAAC,EAAE;EACVpE,cAAAA,UAAU,CAAC;EACTa,gBAAAA,IAAI,EAAE,UAAU;kBAChBiB,QAAQ,EAAEZ,GAAG,CAACe,YAAY;EAC1BT,gBAAAA,SAAS,EAAE,IAAIC,IAAI,EAAE;EACrB7B,gBAAAA,IAAI,EAAE;oBACJW,IAAI,EAAEX,IAAI,CAACW,IAAI;oBACfI,IAAI,EAAEf,IAAI,CAACe,IAAI;oBACfE,IAAI,EAAEjB,IAAI,CAACiB,IAAAA;EACb,iBAAA;EACF,eAAC,CAAC,CAAA;EACFG,cAAAA,OAAO,CAACE,GAAG,CAACe,YAAY,CAAC,CAAA;EAC3B,aAAA;EACF,WAAC,MAAM;cACL,MAAMZ,KAAK,GAAG,IAAIC,KAAK,CAAC,6BAA6BJ,GAAG,CAACW,MAAM,CAAA,CAAE,CAAC,CAAA;EAClE5B,YAAAA,OAAO,CAAC;EACNY,cAAAA,IAAI,EAAE,OAAO;gBACbQ,KAAK;gBACLQ,MAAM,EAAEX,GAAG,CAACW,MAAM;gBAClBL,SAAS,EAAE,IAAIC,IAAI,EAAC;EACtB,aAAC,CAAC,CAAA;cACFR,MAAM,CAACI,KAAK,CAAC,CAAA;EACf,WAAA;WACD,CAAA;UAEDH,GAAG,CAACgB,OAAO,GAAG,MAAM;EAClB,UAAA,MAAMb,KAAK,GAAG,IAAIC,KAAK,CAAC,eAAe,CAAC,CAAA;EACxCrB,UAAAA,OAAO,CAAC;EACNY,YAAAA,IAAI,EAAE,OAAO;cACbQ,KAAK;cACLG,SAAS,EAAE,IAAIC,IAAI,EAAC;EACtB,WAAC,CAAC,CAAA;YACFR,MAAM,CAACI,KAAK,CAAC,CAAA;WACd,CAAA;UAEDH,GAAG,CAACyE,OAAO,GAAG,MAAM;EAClB,UAAA,MAAMtE,KAAK,GAAG,IAAIC,KAAK,CAAC,gBAAgB,CAAC,CAAA;EACzCrB,UAAAA,OAAO,CAAC;EACNY,YAAAA,IAAI,EAAE,OAAO;cACbQ,KAAK;cACLG,SAAS,EAAE,IAAIC,IAAI,EAAC;EACtB,WAAC,CAAC,CAAA;YACFR,MAAM,CAACI,KAAK,CAAC,CAAA;WACd,CAAA;;EAED;EACA,QAAA,MAAMuE,QAAQ,GAAG,IAAIC,QAAQ,EAAE,CAAA;EAC/BD,QAAAA,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAElG,IAAI,CAAC,CAAA;EAC7BsB,QAAAA,GAAG,CAACiB,IAAI,CAACyD,QAAQ,CAAC,CAAA;EACpB,OAAC,CAAC,CAAA;OACH,CAAC,OAAOvE,KAAK,EAAE;EACdpB,MAAAA,OAAO,CAAC;EACNY,QAAAA,IAAI,EAAE,OAAO;UACbQ,KAAK;UACLG,SAAS,EAAE,IAAIC,IAAI,EAAC;EACtB,OAAC,CAAC,CAAA;EACF,MAAA,MAAMJ,KAAK,CAAA;EACb,KAAA;EACF,GAAA;EACF;;;;;;;;"}