{"version":3,"file":"sdk.js","sources":["../src/sdk.js"],"sourcesContent":["class ApexxCloud {\n  constructor(config = {}) {\n    this.config = {\n      baseUrl: config.baseUrl || \"https://api.apexxcloud.com\",\n    };\n\n    // Initialize API clients\n    this.files = {\n      upload: this.uploadFile.bind(this),\n      uploadMultipart: this.uploadMultipart.bind(this),\n    };\n  }\n\n  async uploadMultipart(\n    file,\n    getSignedUrl,\n    {\n      onProgress = () => {},\n      onPartComplete = () => {},\n      onComplete = () => {},\n      onError = () => {},\n      partSize = 5 * 1024 * 1024,\n      signal,\n      concurrency = 3,\n    } = {}\n  ) {\n    let uploadId;\n    let activeXHRs = new Set();\n\n    const cleanup = () => {\n      activeXHRs.forEach((xhr) => xhr.abort());\n      activeXHRs.clear();\n    };\n\n    signal?.addEventListener(\"abort\", () => {\n      cleanup();\n      onError({\n        type: \"abort\",\n        error: new Error(\"Upload aborted\"),\n        phase: \"upload\",\n        timestamp: new Date(),\n      });\n    });\n\n    try {\n      // Start multipart upload\n      const startUrl = await getSignedUrl(\"start-multipart\", {\n        key: file.name,\n        totalParts: Math.ceil(file.size / partSize),\n        mimeType: file.type,\n      });\n\n      const startUpload = () =>\n        new Promise((resolve, reject) => {\n          const xhr = new XMLHttpRequest();\n          activeXHRs.add(xhr);\n\n          if (signal?.aborted) {\n            onError({\n              type: \"abort\",\n              error: new Error(\"Upload aborted\"),\n              phase: \"start\",\n              timestamp: new Date(),\n            });\n            reject(new Error(\"Upload aborted\"));\n            return;\n          }\n\n          xhr.open(\"POST\", startUrl);\n          xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n          xhr.onload = () => {\n            activeXHRs.delete(xhr);\n            if (xhr.status >= 200 && xhr.status < 300) {\n              const response = JSON.parse(xhr.responseText);\n              resolve(JSON.parse(xhr.responseText));\n            } else {\n              const error = new Error(\n                `Start upload failed with status ${xhr.status}`\n              );\n              onError({\n                type: \"error\",\n                error,\n                phase: \"start\",\n                status: xhr.status,\n                timestamp: new Date(),\n              });\n              reject(error);\n            }\n          };\n\n          xhr.onerror = () => {\n            activeXHRs.delete(xhr);\n            const error = new Error(\"Start upload failed\");\n            onError({\n              type: \"error\",\n              error,\n              phase: \"start\",\n              timestamp: new Date(),\n            });\n            reject(error);\n          };\n\n          xhr.send(\n            JSON.stringify({\n              filename: file.name,\n              contentType: file.type,\n              size: file.size,\n            })\n          );\n        });\n\n      const response = await startUpload();\n      const uploadId = response.data.uploadId;\n      // Calculate parts\n      const totalParts = Math.ceil(file.size / partSize);\n      const parts = [];\n      let uploadedBytes = 0;\n\n      // Upload parts with concurrency control\n      const uploadPart = async (partNumber) => {\n        const start = (partNumber - 1) * partSize;\n        const end = Math.min(start + partSize, file.size);\n        const chunk = file.slice(start, end);\n\n        const partUrl = await getSignedUrl(\"uploadpart\", {\n          uploadId,\n          partNumber,\n          key: file.name,\n          totalParts,\n        });\n\n        return new Promise((resolve, reject) => {\n          const xhr = new XMLHttpRequest();\n          activeXHRs.add(xhr);\n\n          if (signal?.aborted) {\n            reject(new Error(\"Upload aborted\"));\n            return;\n          }\n\n          xhr.upload.onprogress = (event) => {\n            if (event.lengthComputable) {\n              const partProgress = event.loaded / event.total;\n              const partSize = end - start;\n              const partLoaded = partSize * partProgress;\n              const totalProgress =\n                ((uploadedBytes + partLoaded) / file.size) * 100;\n\n              onProgress({\n                loaded: uploadedBytes + partLoaded,\n                total: file.size,\n                progress: totalProgress,\n                part: {\n                  number: partNumber,\n                  progress: partProgress * 100,\n                },\n              });\n            }\n          };\n\n          xhr.open(\"POST\", partUrl);\n\n          xhr.onload = () => {\n            activeXHRs.delete(xhr);\n            if (xhr.status >= 200 && xhr.status < 300) {\n              try {\n                const response = JSON.parse(xhr.responseText);\n                const partData = response.data;\n\n                uploadedBytes += chunk.size;\n\n                const part = {\n                  ETag: partData.ETag,\n                  PartNumber: partData.partNumber,\n                };\n\n                onPartComplete(part);\n                resolve(part);\n              } catch (e) {\n                const error = new Error(\n                  \"Invalid JSON response from upload part\"\n                );\n                onError({\n                  type: \"error\",\n                  error,\n                  phase: \"upload\",\n                  partNumber,\n                  status: xhr.status,\n                  timestamp: new Date(),\n                });\n                reject(error);\n              }\n            } else {\n              let errorMessage;\n              try {\n                const errorResponse = JSON.parse(xhr.responseText);\n                errorMessage =\n                  errorResponse.message ||\n                  `Part upload failed with status ${xhr.status}`;\n              } catch (e) {\n                errorMessage =\n                  xhr.responseText ||\n                  `Part upload failed with status ${xhr.status}`;\n              }\n\n              const error = new Error(errorMessage);\n              onError({\n                type: \"error\",\n                error,\n                phase: \"upload\",\n                partNumber,\n                status: xhr.status,\n                timestamp: new Date(),\n              });\n              reject(error);\n            }\n          };\n\n          xhr.onerror = () => {\n            activeXHRs.delete(xhr);\n            reject(new Error(\"Part upload failed\"));\n          };\n          const formData = new FormData();\n          formData.append(\"file\", chunk, file.name);\n          xhr.send(formData);\n        });\n      };\n\n      // Upload parts with concurrency control\n      for (let i = 0; i < totalParts; i += concurrency) {\n        const partNumbers = Array.from(\n          { length: Math.min(concurrency, totalParts - i) },\n          (_, index) => i + index + 1\n        );\n\n        const uploadedParts = await Promise.all(\n          partNumbers.map((partNumber) => uploadPart(partNumber))\n        );\n        parts.push(...uploadedParts);\n      }\n\n      // Complete upload\n      const completeUrl = await getSignedUrl(\"completemultipart\", {\n        uploadId,\n        key: file.name,\n      });\n\n      const completeUpload = () =>\n        new Promise((resolve, reject) => {\n          const xhr = new XMLHttpRequest();\n          activeXHRs.add(xhr);\n\n          xhr.open(\"POST\", completeUrl);\n          xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n\n          // Add upload progress handler\n          xhr.upload.onprogress = (event) => {\n            if (event.lengthComputable) {\n              onProgress({\n                loaded: file.size, // At this point, all parts are uploaded\n                total: file.size,\n                progress: 100, // Complete\n                phase: \"complete\",\n                type: \"progress\",\n              });\n            }\n          };\n\n          xhr.onload = () => {\n            activeXHRs.delete(xhr);\n            if (xhr.status >= 200 && xhr.status < 300) {\n              const response = JSON.parse(xhr.responseText);\n              onProgress({\n                loaded: file.size,\n                total: file.size,\n                progress: 100,\n                phase: \"complete\",\n                type: \"progress\",\n              });\n              onComplete({\n                type: \"complete\",\n                response,\n                timestamp: new Date(),\n                file: {\n                  name: file.name,\n                  size: file.size,\n                  type: file.type,\n                },\n              });\n              resolve(response);\n            } else {\n              reject(\n                new Error(`Complete upload failed with status ${xhr.status}`)\n              );\n            }\n          };\n\n          xhr.onerror = () => {\n            activeXHRs.delete(xhr);\n            reject(new Error(\"Complete upload failed\"));\n          };\n          xhr.send(\n            JSON.stringify({\n              parts: parts.sort((a, b) => a.PartNumber - b.PartNumber),\n            })\n          );\n        });\n\n      return await completeUpload();\n    } catch (error) {\n      cleanup();\n      // If something goes wrong and we have an uploadId, try to cancel the upload\n      if (uploadId) {\n        try {\n          const cancelUrl = await getSignedUrl(\"cancelmultipart\", {\n            uploadId,\n            key: file.name,\n          });\n\n          await new Promise((resolve, reject) => {\n            const xhr = new XMLHttpRequest();\n            xhr.open(\"DELETE\", cancelUrl);\n            xhr.onload = () => (xhr.status < 300 ? resolve() : reject());\n            xhr.onerror = () => reject();\n            xhr.send();\n          });\n        } catch (cancelError) {\n          console.error(\"Failed to cancel multipart upload:\", cancelError);\n        }\n      }\n\n      onError({\n        type: \"error\",\n        error,\n        phase: \"upload\",\n        timestamp: new Date(),\n      });\n      throw error;\n    }\n  }\n\n  async uploadFile(\n    file,\n    getSignedUrl,\n    {\n      onProgress = () => {},\n      onComplete = () => {},\n      onError = () => {},\n      onStart = () => {},\n      signal,\n    } = {}\n  ) {\n    try {\n      // Get signed URL for upload\n      const signedUrl = await getSignedUrl(\"upload\", {\n        key: file.name,\n        mimeType: file.type,\n      });\n\n      const xhr = new XMLHttpRequest();\n\n      if (signal?.aborted) {\n        onError({\n          type: \"abort\",\n          error: new Error(\"Upload aborted\"),\n          timestamp: new Date(),\n        });\n        throw new Error(\"Upload aborted\");\n      }\n\n      signal?.addEventListener(\"abort\", () => {\n        xhr.abort();\n        onError({\n          type: \"abort\",\n          error: new Error(\"Upload aborted\"),\n          timestamp: new Date(),\n        });\n      });\n\n      // Return promise for upload completion\n      return new Promise((resolve, reject) => {\n        xhr.open(\"PUT\", signedUrl);\n\n        // Setup progress tracking\n        xhr.upload.onprogress = (event) => {\n          if (event.lengthComputable) {\n            const percentComplete = (event.loaded / event.total) * 100;\n            onProgress({\n              loaded: event.loaded,\n              total: event.total,\n              progress: percentComplete,\n              type: \"progress\",\n            });\n          }\n        };\n\n        // Setup start handler\n        xhr.upload.onloadstart = () => {\n          onStart({\n            type: \"start\",\n            timestamp: new Date(),\n            file: {\n              name: file.name,\n              size: file.size,\n              type: file.type,\n            },\n          });\n        };\n\n        // Setup completion handler\n        xhr.onload = () => {\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              const response = JSON.parse(xhr.responseText);\n              onComplete({\n                type: \"complete\",\n                response,\n                timestamp: new Date(),\n                file: {\n                  name: file.name,\n                  size: file.size,\n                  type: file.type,\n                },\n              });\n              resolve(response);\n            } catch (e) {\n              onComplete({\n                type: \"complete\",\n                response: xhr.responseText,\n                timestamp: new Date(),\n                file: {\n                  name: file.name,\n                  size: file.size,\n                  type: file.type,\n                },\n              });\n              resolve(xhr.responseText);\n            }\n          } else {\n            const error = new Error(`Upload failed with status ${xhr.status}`);\n            onError({\n              type: \"error\",\n              error,\n              status: xhr.status,\n              timestamp: new Date(),\n            });\n            reject(error);\n          }\n        };\n\n        xhr.onerror = () => {\n          const error = new Error(\"Upload failed\");\n          onError({\n            type: \"error\",\n            error,\n            timestamp: new Date(),\n          });\n          reject(error);\n        };\n\n        xhr.onabort = () => {\n          const error = new Error(\"Upload aborted\");\n          onError({\n            type: \"abort\",\n            error,\n            timestamp: new Date(),\n          });\n          reject(error);\n        };\n\n        // Create FormData and send\n        const formData = new FormData();\n        formData.append(\"file\", file);\n        xhr.send(formData);\n      });\n    } catch (error) {\n      onError({\n        type: \"error\",\n        error,\n        timestamp: new Date(),\n      });\n      throw error;\n    }\n  }\n}\n\nexport default ApexxCloud;\n"],"names":["ApexxCloud","constructor","config","baseUrl","files","upload","uploadFile","bind","uploadMultipart","file","getSignedUrl","onProgress","onPartComplete","onComplete","onError","partSize","signal","concurrency","activeXHRs","Set","cleanup","forEach","xhr","abort","clear","addEventListener","type","error","Error","phase","timestamp","Date","startUrl","key","name","totalParts","Math","ceil","size","mimeType","startUpload","Promise","resolve","reject","XMLHttpRequest","add","aborted","open","setRequestHeader","onload","delete","status","response","JSON","parse","responseText","onerror","send","stringify","filename","contentType","uploadId","data","parts","uploadedBytes","uploadPart","partNumber","start","end","min","chunk","slice","partUrl","onprogress","event","lengthComputable","partProgress","loaded","total","partLoaded","totalProgress","progress","part","number","partData","ETag","PartNumber","e","errorMessage","errorResponse","message","formData","FormData","append","i","partNumbers","Array","from","length","_","index","uploadedParts","all","map","push","completeUrl","completeUpload","sort","a","b","onStart","signedUrl","percentComplete","onloadstart","onabort"],"mappings":"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"}