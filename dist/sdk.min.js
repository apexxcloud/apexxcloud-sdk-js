!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).ApexxCloudSDK=t()}(this,(function(){"use strict";return class{constructor(e={}){this.config={baseUrl:e.baseUrl||"https://api.apexxcloud.com"},this.files={upload:this.uploadFile.bind(this),uploadMultipart:this.uploadMultipart.bind(this)}}async uploadMultipart(e,t,{onProgress:r=()=>{},onPartComplete:a=()=>{},onComplete:o=()=>{},onError:s=()=>{},partSize:p=5242880,signal:n,concurrency:i=3}={}){try{const l=await t("start-multipart",{key:e.name,totalParts:Math.ceil(e.size/p),mimeType:e.type}),d=()=>new Promise(((t,r)=>{const a=new XMLHttpRequest;if(n?.aborted)return s({type:"abort",error:new Error("Upload aborted"),phase:"start",timestamp:new Date}),void r(new Error("Upload aborted"));a.open("POST",l),a.setRequestHeader("Content-Type","application/json"),a.onload=()=>{if(a.status>=200&&a.status<300){JSON.parse(a.responseText);t(JSON.parse(a.responseText))}else{const e=new Error(`Start upload failed with status ${a.status}`);s({type:"error",error:e,phase:"start",status:a.status,timestamp:new Date}),r(e)}},a.onerror=()=>{const e=new Error("Start upload failed");s({type:"error",error:e,phase:"start",timestamp:new Date}),r(e)},a.send(JSON.stringify({filename:e.name,contentType:e.type,size:e.size}))})),u=(await d()).data.uploadId,m=Math.ceil(e.size/p),c=[];let w=0;const y=async o=>{const i=(o-1)*p,l=Math.min(i+p,e.size),d=e.slice(i,l),c=await t("uploadpart",{uploadId:u,partNumber:o,key:e.name,totalParts:m});return new Promise(((t,p)=>{const u=new XMLHttpRequest;if(n?.aborted)return void p(new Error("Upload aborted"));u.upload.onprogress=t=>{if(t.lengthComputable){const a=t.loaded/t.total,s=(l-i)*a,p=(w+s)/e.size*100;r({loaded:w+s,total:e.size,progress:p,part:{number:o,progress:100*a}})}},u.open("POST",c),u.onload=()=>{if(u.status>=200&&u.status<300)try{const e=JSON.parse(u.responseText).data;w+=d.size;const r={ETag:e.ETag,PartNumber:e.partNumber};a(r),t(r)}catch(e){const t=new Error("Invalid JSON response from upload part");s({type:"error",error:t,phase:"upload",partNumber:o,status:u.status,timestamp:new Date}),p(t)}else{let e;try{e=JSON.parse(u.responseText).message||`Part upload failed with status ${u.status}`}catch(t){e=u.responseText||`Part upload failed with status ${u.status}`}const t=new Error(e);s({type:"error",error:t,phase:"upload",partNumber:o,status:u.status,timestamp:new Date}),p(t)}},u.onerror=()=>p(new Error("Part upload failed"));const m=new FormData;m.append("file",d,e.name),u.send(m)}))};for(let e=0;e<m;e+=i){const t=Array.from({length:Math.min(i,m-e)},((t,r)=>e+r+1)),r=await Promise.all(t.map((e=>y(e))));c.push(...r)}const f=await t("completemultipart",{uploadId:u,key:e.name}),h=()=>new Promise(((t,a)=>{const p=new XMLHttpRequest;p.open("POST",f),p.setRequestHeader("Content-Type","application/json"),p.upload.onprogress=t=>{t.lengthComputable&&r({loaded:e.size,total:e.size,progress:100,phase:"complete",type:"progress"})},p.onload=()=>{if(p.status>=200&&p.status<300)try{const a=JSON.parse(p.responseText);a.data;r({loaded:e.size,total:e.size,progress:100,phase:"complete",type:"progress"}),o({type:"complete",timestamp:new Date,file:{name:e.name,size:e.size,type:e.type}}),t(a)}catch(e){const t=new Error("Invalid JSON response from complete upload");s({type:"error",error:t,phase:"complete",status:p.status,timestamp:new Date}),a(t)}else a(new Error(`Complete upload failed with status ${p.status}`))},p.onerror=()=>a(new Error("Complete upload failed")),p.send(JSON.stringify({parts:c.sort(((e,t)=>e.PartNumber-t.PartNumber))}))}));return await h()}catch(e){throw s({type:"error",error:e,phase:"upload",timestamp:new Date}),e}}async uploadFile(e,t,{onProgress:r=()=>{},onComplete:a=()=>{},onError:o=()=>{},onStart:s=()=>{},signal:p}={}){try{const n=await t("upload",{key:e.name,mimeType:e.type}),i=new XMLHttpRequest;if(p?.aborted)throw o({type:"abort",error:new Error("Upload aborted"),timestamp:new Date}),new Error("Upload aborted");return p?.addEventListener("abort",(()=>i.abort())),new Promise(((t,p)=>{i.open("PUT",n),i.upload.onprogress=e=>{if(e.lengthComputable){const t=e.loaded/e.total*100;r({loaded:e.loaded,total:e.total,progress:t,type:"progress"})}},i.upload.onloadstart=()=>{s({type:"start",timestamp:new Date,file:{name:e.name,size:e.size,type:e.type}})},i.onload=()=>{if(i.status>=200&&i.status<300)try{const r=JSON.parse(i.responseText);a({type:"complete",response:r,timestamp:new Date,file:{name:e.name,size:e.size,type:e.type}}),t(r)}catch(r){a({type:"complete",response:i.responseText,timestamp:new Date,file:{name:e.name,size:e.size,type:e.type}}),t(i.responseText)}else{const e=new Error(`Upload failed with status ${i.status}`);o({type:"error",error:e,status:i.status,timestamp:new Date}),p(e)}},i.onerror=()=>{const e=new Error("Upload failed");o({type:"error",error:e,timestamp:new Date}),p(e)},i.onabort=()=>{const e=new Error("Upload aborted");o({type:"abort",error:e,timestamp:new Date}),p(e)};const l=new FormData;l.append("file",e),i.send(l)}))}catch(e){throw o({type:"error",error:e,timestamp:new Date}),e}}}}));
//# sourceMappingURL=sdk.min.js.map
